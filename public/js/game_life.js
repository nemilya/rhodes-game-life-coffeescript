// Generated by CoffeeScript 1.3.3
(function() {
  var GameLife;

  GameLife = (function() {

    function GameLife(options) {
      this.EMPTY_CELL = '';
      this.LIVE_CELL = '*';
      this.cells = [];
      if (options['empty_cell']) {
        this.empty_cell = options['empty_cell'];
      } else {
        this.empty_cell = this.EMPTY_CELL;
      }
      if (!(options['live_cell'] != null)) {
        this.live_cell = options['live_cell'];
      } else {
        this.live_cell = this.LIVE_CELL;
      }
      if (options["map"]) {
        this.set_generation(options["map"]);
      } else {
        this.cols = options["cols"];
        this.rows = options["rows"];
        this.init_cells();
      }
    }

    GameLife.prototype.init_cells = function() {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.cells[row] = [];
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.cells[row][col] = this.empty_cell);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameLife.prototype.screen = function() {
      var cell, ret, row, _i, _j, _len, _len1, _ref;
      ret = '';
      _ref = this.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cell = row[_j];
          ret += cell;
        }
        ret += "\n";
      }
      return ret;
    };

    GameLife.prototype.set_life_at = function(position) {
      var x, y;
      x = position["row"];
      y = position["col"];
      return this.cells[x][y] = this.live_cell;
    };

    GameLife.prototype.max_cols = function() {
      return this.cols;
    };

    GameLife.prototype.max_rows = function() {
      return this.rows;
    };

    GameLife.prototype.set_generation = function(map) {
      var cell, cells, cur_col, cur_row, row, rows, _i, _j, _len, _len1, _results;
      rows = map.trim().split(/\n/);
      this.rows = rows.length;
      this.cols = rows[0].split(/(?:)/).length;
      this.init_cells();
      cur_row = 0;
      _results = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        cur_col = 0;
        cells = row.split(/(?:)/);
        for (_j = 0, _len1 = cells.length; _j < _len1; _j++) {
          cell = cells[_j];
          if (cell === this.live_cell) {
            this.set_life_at({
              row: cur_row,
              col: cur_col
            });
          }
          cur_col += 1;
        }
        _results.push(cur_row += 1);
      }
      return _results;
    };

    GameLife.prototype.is_cell_life = function(location) {
      var c, r;
      c = location["col"];
      r = location["row"];
      if (this.cells[r] && this.cells[r][c]) {
        return this.cells[r][c] === this.live_cell;
      }
      return false;
    };

    GameLife.prototype.neighbour_count_at = function(location) {
      var at_location, cnt, d_c, d_r, delta_col, delta_row, neighbour_vectors, v, _i, _j, _k, _len, _len1, _len2;
      neighbour_vectors = [];
      delta_row = [-1, 0, 1];
      delta_col = [-1, 0, 1];
      for (_i = 0, _len = delta_row.length; _i < _len; _i++) {
        d_r = delta_row[_i];
        for (_j = 0, _len1 = delta_col.length; _j < _len1; _j++) {
          d_c = delta_col[_j];
          if (d_r === 0 && d_c === 0) {
            continue;
          }
          neighbour_vectors.push([d_r, d_c]);
        }
      }
      cnt = 0;
      for (_k = 0, _len2 = neighbour_vectors.length; _k < _len2; _k++) {
        v = neighbour_vectors[_k];
        at_location = {};
        at_location["row"] = location["row"] + v[0];
        at_location["col"] = location["col"] + v[1];
        if (this.is_cell_life(at_location)) {
          cnt += 1;
        }
      }
      return cnt;
    };

    GameLife.prototype.is_cell_will_be_live = function(cell, neighbour_count) {
      if (cell === this.empty_cell && neighbour_count === 3) {
        return true;
      }
      if (cell === this.live_cell && (neighbour_count === 3 || neighbour_count === 2)) {
        return true;
      }
      return false;
    };

    GameLife.prototype.do_step = function() {
      var cell, cur_col, cur_row, neighbour_cnt, new_cell, new_cells, new_row, row, _i, _j, _len, _len1, _ref;
      new_cells = [];
      cur_row = 0;
      _ref = this.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        cur_col = 0;
        new_row = [];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cell = row[_j];
          new_cell = this.empty_cell;
          neighbour_cnt = this.neighbour_count_at({
            row: cur_row,
            col: cur_col
          });
          if (this.is_cell_will_be_live(cell, neighbour_cnt)) {
            new_cell = this.live_cell;
          }
          new_row.push(new_cell);
          cur_col += 1;
        }
        new_cells.push(new_row);
        cur_row += 1;
      }
      return this.cells = new_cells;
    };

    return GameLife;

  })();

  // replaced exports to this
  this.GameLife = GameLife;

}).call(this);
